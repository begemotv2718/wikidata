---
categories: programming,algorithms
...

# String algorithms

* [Suffix trees](http://marknelson.us/1996/08/01/suffix-trees/)

# Statistical sampling

* [russhater: computing median of stream](http://shkrobius.livejournal.com/608677.html?thread=11817381#t11817381)

The idea is the following: to compute median of potentially infinite stream we try to sample 1000 elements of the stream with equal probability. This is easy: at arrival of k-th element of the stream take a random $r$ in interval (0..k) and if $r<1000$ replace r-th element in the buffer with k-th element, otherwise discard it.

## Proper way to do this

* [Discussion in shkrobius journal](http://shkrobius.livejournal.com/609095.html?thread=11839047#t11839047)
    * [Countâ€“min_sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch)
    * [Stackoverflow on running median computation](http://stackoverflow.com/questions/10657503/find-running-median-from-a-stream-of-integers)

#Functional programming algorithms

* [A Very general Method of Computing Shortest Paths](http://r6.ca/blog/20110808T035622Z.html) -- Floyd-Warshall algorithm and Gaussian elimination

## See also 

[Functional programming]() -- Data structures

# Sorting

## Small size sort

### 5 element sort

* [SO: Sort 5 elements in better than 8 comparison](https://stackoverflow.com/questions/1534748/design-an-efficient-algorithm-to-sort-5-distinct-keys-in-fewer-than-8-comparison)
    * Pseudocode
```
if (A > B)
    swap A, B
if (C > D)
    swap C, D
if (A > C)
    swap A, C
    swap B, D  # Thanks Deqing!

if (E > C)
    if (E > D) %A C D E
        if (B > D)
            if (B > E)
                return (A, C, D, E, B)
            else
                return (A, C, D, B, E)
         else
            if (B < C)
                return (A, B, C, D, E)
            else
                return (A, C, B, D, E)

    else %A C E D
        if (B > E)
            if (B > D)
                return (A, C, E, D, B)
            else
                return (A, C, E, B, D)
         else
            if (B < C)
                return (A, B, C, E, D)
            else
                return (A, C, B, E, D)
else
    if (E < A) % E A C D
        if (B > C)
            if (B > D)
                return (E, A, C, D, B)
            else
                return (E, A, C, B, D)
         else
             return (E, A, B, C, D)

    else %A E C D
        if (B > C)
            if (B > D)
                return (A, E, C, D, B)
            else
                return (A, E, C, B, D)
         else
            if (B < E)
                return (A, B, E, C, D)
            else
                return (A, E, B, C, D)
```



## Network sort 

* [Wikipedia: Sorting network](https://en.wikipedia.org/wiki/Sorting_network)

Network sort is sort for a fixed size array involving only ```compare_swap``` operation ( ```compare_swap(*a,*b){if(*a<*b){swap(a,b)}}``` ).

The construction is fixed and sometimes operations can be performed in parallel (good for hardware).

* [Online generate optimal sort networks](http://pages.ripco.net/~jgamble/nw.html). Perl module for generating networks: ```Algorithm::Networksort```

## Median of five

* [SO: Median of 5 in C# (actually also in C++)](https://stackoverflow.com/questions/480960/code-to-calculate-median-of-five-in-c-sharp)

# Packing

* [Survey for 2-D packing algorithms](http://cgi.csc.liv.ac.uk/~epa/surveyhtml.html#toc.2)

# Damn cool algorithms

* [Nick's Blog](http://blog.notdot.net/tag/damn-cool-algorithms)
    * [Part 1: BK-Trees - Nick's Blog](http://blog.notdot.net/2007/4/Damn-Cool-Algorithms-Part-1-BK-Trees)