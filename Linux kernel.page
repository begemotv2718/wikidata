---
categories: linux, kernel
...

# Start guide

* [Start kernel hacking](https://kernelnewbies.org/StartKernelHacking)

# Device tree

* [Device tree history](https://elinux.org/Device_tree_history) Few points into LKML. Discussions are of May 2009
* [Device tree: What is it? on elinux.org](https://elinux.org/Device_Tree_What_It_Is) Discuss competitors (ACPI,UEFI(it also exists for ARM),OpenFirmware). Also describes advantages.
* [Device tree: Usage. on elinux.org](https://elinux.org/Device_Tree_Usage) Main article explaining device tree.
* [Device tree: Reference](https://elinux.org/Device_Tree_Reference) Links to the articles above
* [Device tree misteries on elinux.org](https://elinux.org/Device_Tree_Mysteries) Contains quite comprehencive explanation of phandles and quite incomprehencive explanation of #xxx-cells properties.
* [Device tree for raspberry-pi: Nice explanation of overlays and parameters](https://github.com/raspberrypi/documentation/blob/master/configuration/device-tree.md)

## Device tree overlays

* [For raspberry](https://github.com/raspberrypi/documentation/blob/master/configuration/device-tree.md) -- also linked above.

Mechanics. To be able to load overlays one need to compile kernel with overlays support (does this need applying patches?). Then configfs should be created (```mount -t configfs none /sys/kernel/config```).  Some useful tips [here](https://github.com/96boards/documentation/blob/master/consumer/dragonboard410c/guides/dt-overlays.md)

[Raspberry pi dtoverlay source code](https://github.com/raspberrypi/userland/blob/master/host_applications/linux/apps/dtoverlay/dtoverlay_main.c)

> So I rebuild U-Boot with overlay support enabled, but it turns out U-Boot’s support for patching the DT is quite limited. Also in case of any merge problems in the future, the system would hang in bootloader stage, which is not nice.

--- [Device Tree Overlays | Sebastian Reichel](http://elektranox.org/2017/05/0020-dt-overlays/)

## Videos

* [Device Tree for Dummies! - Thomas Petazzoni](https://www.youtube.com/watch?v=m_NyYEBxfn8)

# Kernel and networking

* [habr: Kernel structures responsible for network functions](https://habrahabr.ru/company/mailru/blog/314168/)

# Kernel modules

## List modules managed by dkms

```bash
dkms status
```

## Writing kernel module for raspberry pi

* [GPIO interrupts in kernel on raspberry pi](http://morethanuser.blogspot.hu/2013/04/raspbery-pi-gpio-interrupts-in-kernel.html) (I used this while writing geiger counter module)
    * [Derek Molloy Kernel gpio buttons and leds](http://derekmolloy.ie/kernel-gpio-programming-buttons-and-leds/)
* [The Linux Kernel Module Programming Guide](http://www.tldp.org/LDP/lkmpg/2.6/html/lkmpg.html)
* [Rpi kernel module for interrupt management](https://www.disk91.com/2015/technology/systems/rf433-raspberry-pi-gpio-kernel-driver-for-interrupt-management/)
* [Compiling modules for rpi](http://bchavez.bitarmory.com/archive/2013/01/16/compiling-kernel-modules-for-raspberry-pi.aspx)

Kernel compilation See [Rpi kernel complilation: Cross compiling from Linux](http://elinux.org/Raspberry_Pi_Kernel_Compilation#2._Cross_compiling_from_Linux)

```bash
cd ${HOME}/rpi
git clone ssh://git@github.com/raspberrypi/tools.git
export CCPREFIX=${HOME}/rpi/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi
cd linux/
cp arch/arm/configs/bcmrpi_defconfig .config
make ARCH=arm CROSS_COMPILE=${CCPREFIX} menuconfig
make ARCH=arm CROSS_COMPILE=${CCPREFIX}
cd ..
git clone git://github.com/raspberrypi/firmware.git
#cd firmware/
export MODULES_TEMP=/home/adamov/rpi/modules
make ARCH=arm CROSS_COMPILE=${CCPREFIX} INSTALL_MOD_PATH=${MODULES_TEMP} modules_install
```
Some notes on configuring [here](http://elinux.org/RPiconfig)


In module directory create Makefile. Guide to writing makefile -- kernel doc [https://www.kernel.org/doc/Documentation/kbuild/modules.txt](https://www.kernel.org/doc/Documentation/kbuild/modules.txt) How to Build External Modules


```make
# my optional module name
MODULE=geiger_module
 
# this two variables, depends where you have you raspberry kernel source and tools installed
 
CCPREFIX=/home/adamov/rpi/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin/arm-bcm2708-linux-gnueabi-
KERNEL_SRC=../linux #PATH to the kernel source
 
 
obj-m += ${MODULE}.o
 
module_upload=${MODULE}.ko
 
all: clean compile
 
compile:
	make ARCH=arm CROSS_COMPILE=${CCPREFIX} -C ${KERNEL_SRC} M=$(PWD) modules
 
clean:
	make -C ${KERNEL_SRC} M=$(PWD) clean
 
 
# this just copies a file to raspberry
install:
	scp ${module_upload} ${HOME}/rpi/modules/
 
info:
	modinfo  ${module_upload}

```

Date and time inside module [Stackoverflow: getting date and time in linux kernel space ](http://stackoverflow.com/questions/5077192/how-to-get-current-hour-time-of-day-in-linux-kernel-space)


## Comprehensive kernel module writing guide

* [The Linux Kernel Module Programming Guide](http://tldp.org/LDP/lkmpg/2.6/html/index.html)

## Habr: writing netfilter modules

* [Учимся писать модуль ядра (Netfilter) или Прозрачный прокси для HTTPS](https://habrahabr.ru/post/138328/)
* [Изучаем netfilter: пишем свой match-модуль на базе xt_string для поиска нескольких шаблонов](https://habrahabr.ru/post/138328/)

## Habr: module for display

* [Creating driver for linux](https://habrahabr.ru/post/206148/) -- tty device with parallel port interface
* [Framebuffer device and usb interface](https://habrahabr.ru/post/164635/)

## Devres subsystem

The story started from LVEE talk [Typical mistakes when submitting a new code to Linux kernel](https://lvee.org/ru/abstracts/240) (video available at [0x1.tv](http://0x1.tv/20170423C) ).

Some links found by investigations

* [devres -- kernel documentation reference](https://www.kernel.org/doc/Documentation/driver-model/devres.txt)
* [LWN article](https://lwn.net/Articles/222860/) ([introduction patch](https://lwn.net/Articles/215861/)
* [Lecture - Eli Billauer](http://haifux.org/lectures/323/)

# Device drivers

## X DRM

* [X DRM]()

## Presentations

* [Introduction to char device driver](https://www.slideshare.net/VandanaSalve/introduction-to-char-device-driver) -- nothing fancy but can be helpful to organize my own slides

## Books

* Essential linux device drivers [Source code examples](https://elinuxdd.com/~elinuxdd/elinuxdd.docs/listings/)

## Industrial io subsystem

Subsystem for slow ADC like devices or sensors that does not fit into input or hwmon class.

* [Analog devices presentation](https://wiki.analog.com/software/linux/docs/iio/iio)
* [Presentation](https://events.static.linuxfound.org/sites/events/files/slides/lceu15_baluta.pdf)
* [Another presentation](https://elinux.org/images/b/ba/ELC_2017_-_Industrial_IO_and_You-_Nonsense_Hacks%21.pdf)

## Misc subsystem 

Misc subsystem is for small character devices. Share the same major number (10), dynamic minor number

* [Miscellaneous Character Drivers: Linux Journal](https://www.linuxjournal.com/article/2920)
* [Essential linux device drivers: misc devices](http://www.embeddedlinux.org.cn/essentiallinuxdevicedrivers/final/ch05lev1sec7.html)


## Porting out-of-tree drivers

* [LWN: porting out of tree devices to the new version of kernel](https://lwn.net/Articles/739578/) 
* [Home page for the tools](http://select-new.gforge.inria.fr/)

Several instruments are suggested by Coccinela author to a) identify necessary changes to driver based on C compiler complains b) identify kernel modules with similar patches

## Videos

* [Разработка модулей ядра Linux: Кирилл Кринкин](https://www.youtube.com/playlist?list=PLwwk4BHih4fjcK0dl7sAVCmT1LD-8sVUg)
* [Solidus code: simple char device (not very good), usb device](https://www.youtube.com/playlist?list=PL16941B715F5507C5)
* [НОУ ИНТУИТ ядро Линукс (mostly VFS, network, scheduler)](https://www.youtube.com/playlist?list=PLDrmKwRSNx7Ja7NAt21HgNAIlTvJJ4Kso)

# Kernel internals

* [Анатомия методов синхронизации Linux](https://www.ibm.com/developerworks/ru/library/l-linux-synchronization/index.html)
* [Анатомия ядра Linux](https://www.ibm.com/developerworks/ru/library/l-linux-kernel/)

## Kernel map

* [Interactive kernel map](http://www.makelinux.net/kernel_map/)

## Modern block device (blk-mq)

* [habr: Linux Kernel 5.0 — пишем Simple Block Device под blk-mq ](https://habr.com/ru/company/veeam/blog/446148/)
    * [Code on github](https://github.com/CodeImp/sblkdev)

## PCI devices

* Example of qemu tutorial PCI device: [StackOverflow post](https://stackoverflow.com/questions/28315265/how-to-add-a-new-device-in-qemu-source-code/44612957) [QEMU side](https://github.com/qemu/qemu/blob/v2.7.0/hw/misc/edu.c) [Linux side](https://github.com/cirosantilli/linux-kernel-module-cheat/blob/6788a577c394a2fc512d8f3df0806d84dc09f355/kernel_module/pci.c)

* [AHCI and SAS discussion](https://arstechnica.com/civis/viewtopic.php?f=11&t=1149772)
* [PCI specifications](https://pcisig.com/specifications)
* [PCI configuration space - Wikipedia](https://en.wikipedia.org/wiki/PCI_configuration_space)
    

# Kernel debug

[Kernel debug]()

# Interesting kernel resources

[0xAX linux-insides](https://github.com/0xAX/linux-insides)
[Russian translation of linux-insides](https://github.com/proninyaroslav/linux-insides-ru)

# Kernel modules in other languages

* [Kernel module in Swift](https://habrahabr.ru/post/305530/)