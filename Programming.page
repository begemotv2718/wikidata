---
format: Markdown
categories: programming
...

* [Functional programming]()
* [Git/github cheatsheets]()
* [Xmonad cheatsheets]()
* [X windows cheatsheets]()
* OS
    * [Linux]()
    * [Microkernel and miscellaneous]()
* [Networking]()
* [Constraint optimization]()
* [Algorithms]()
* [Tricks]()
* [Web programming]()
* [Android]()

# Interesting projects on github

[Interesting projects on github]()

# Books

* [StackOverflow Book every programmer should read](http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read)

# Languages 

* [Perl]()
* [Python]()
* [Haskell]()
* [Prolog]()
* [Cpp]()
* [C]()
* [Assembler]()
* [LaTeX]()
* [Smalltalk]()
* [Shell]()

## Resources for learning languages

* [LearnXinYminutes](https://learnxinyminutes.com/)
* [Hyperpolyglot: side by side comparison of languages](http://hyperpolyglot.org/)
* [Exorcism.io: excersizes](http://exercism.io/languages)

# IDE-like

* [Tools for vim and emacs]()

# Automatic verification

## Linters

* [Github: clean code linters](https://github.com/showcases/clean-code-linters) In particular: [oclint c/cpp checker](https://github.com/oclint/oclint)
* [Github: quite comprehensive list of linters](https://github.com/mcandre/linters)
* [Abraxas Software CodeCheck -- Seems to be open source and even free MISRA rules checker](http://www.abxsoft.com/misra/misra-index.html)

## Static analysis tools

* [Facebook infer](http://fbinfer.com/)
    * [Installation](http://fbinfer.com/docs/getting-started.html) [github](https://github.com/facebook/infer)
    * [Some background](https://code.facebook.com/posts/1648953042007882/open-sourcing-facebook-infer-identify-bugs-before-you-ship/)
         * [Separation logic](http://fbinfer.com/docs/separation-logic-and-bi-abduction.html#biabduction)
         * [Hoare logic](https://en.wikipedia.org/wiki/Hoare_logic)
* [En wikipedia: List of tools for static code analysis](https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis)
    * [Frama-C](https://en.wikipedia.org/wiki/Frama-C) Free software tool developed at Inria, support abstract interpretation. [Official website](http://frama-c.com/)
    * [Yasca](https://en.wikipedia.org/wiki/Yasca) Free tool integrating several static analysis tools [Official website](http://www.scovetta.com/yasca.html)

* [VCC](https://vcc.codeplex.com/) Tool by Microsoft research. Has only non-commercial/research [license](http://vcc.codeplex.com/license). But the source code is [available](https://vcc.codeplex.com/SourceControl/latest). Internally it use [SMT solvers](https://en.wikipedia.org/wiki/Satisfiability_modulo_theories) (relatives of [SAT Solvers](https://en.wikipedia.org/wiki/Boolean_satisfiability_problem#Algorithms_for_solving_SAT))

* Static code graph generation
    * [ncc](http://students.ceid.upatras.gr/~sxanth/ncc/)
    * [codeviz](http://freshmeat.sourceforge.net/projects/codeviz/) [Github?](https://github.com/petersenna/codeviz)
    * Commercial:  DMS Software Reengineering Toolkit (via [StackOverflow](https://stackoverflow.com/questions/9470871/static-call-graph-generation-for-the-linux-kernel)

## Haskell

[Galois, Inc Merging SMT solvers and programming languages article](http://galois.com/blog/2011/01/merging-smt-solvers-and-programming-languages/) suggest some automatic verificators based on [SMT libraries](http://smtlib.cs.uiowa.edu/). These are [Data.SBV](http://hackage.haskell.org/package/sbv-0.9.7/docs/Data-SBV.html) (prover for bit-operating programs) and [yices-painless](https://donsbot.wordpress.com/2011/01/16/painless-np-complete-problems-an-embedded-dsl-for-smt-solving/) (more general prover).

## See also 

Since many provers are based on SAT/SMT solvers see also [Constraint optimization]()

## Rosette

[Link](https://emina.github.io/rosette/)

Rosette is a solver-aided programming language that extends Racket with language constructs for program synthesis, verification, and more. To verify or synthesize code, Rosette compiles it to logical constraints solved with off-the-shelf SMT solvers. By combining virtualized access to solvers with Racket’s metaprogramming, Rosette makes it easy to develop synthesis and verification tools for new languages. You simply write an interpreter for your language in Rosette, and you get the tools for free!

## Parsing tools

* [Python C parser -- github](https://github.com/albertz/PyCParser)

# Compilers


## C compiler

* [Intel Pin](https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool) dynamic binary instrumentation tool, free as free beer. Suggested as a better implementation of what valgrind do.
* sdcc
    * [sdcc design document -- pdf](https://web.archive.org/web/20090617011643/http://www.circuitcellar.com/SA/Articles2/Dutta-121.pdf)
    * [sdcc MCU simulation](https://sourceforge.net/p/sdcc/code/HEAD/tree/trunk/sdcc/sim/ucsim/stm8.src/inst.cc)

# Dynamic code analysis

* Valgrind is an obvious candidate here
* [Intel PIN library](https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool) Commercial free as a beer program. Claims to be faster than valgrind.
* [Paradyn/Dyninst: virtual machines and so on](http://www.dyninst.org/) [wikipedia](https://ru.wikipedia.org/wiki/DynInst)

# Linking

## General

* [Shared libraries](http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html)

## Overlinking and underlinking

* [Overlinking](http://wiki.rosalab.ru/ru/index.php/Overlinking) -- when a binary depend on libraries that is actually a dependence of its other libraries but not of the binary itself (emacs depends on libpng, libpng depends on libz, emacs should not depend on libz by itself, otherwise it is overlinked).
* [Underlinking](http://wiki.rosalab.ru/ru/index.php/Underlinking)
* [as-needed](https://wiki.gentoo.org/wiki/Project:Quality_Assurance/As-needed)

The --as-needed flag is passed to the GNU linker (GNU ld ). The flag tells the linker to link in the produced binary only the libraries containing symbols actually used by the binary itself. This binary can be either a final executable or another library.

In theory, when linking something, only the needed libraries are passed to the command line used to invoke the linker. But to workaround systems with broken linkers or not using ELF format, many libraries declare some "dependencies" that get pulled in while linking. A simple example can be found by looking at the libraries declared as dependencies by gtk+ 2.0

## API vs ABI

[API vs ABI: stackoverflow](http://stackoverflow.com/questions/2171177/what-is-application-binary-interface-abi)

## LD_PRELOAD

[stackoverflow](http://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick)

## GDB

Specifying source directories: 

```show directories```
```set directories=```
```directory <path>```

If sources are moved and the part of path is changed
```set substitute-path /foo/bar /mnt/cross```

This is from [here](https://sourceware.org/gdb/onlinedocs/gdb/Source-Path.html)

# Graphics

## 3D

* [MeshLab](http://www.meshlab.net/#features)
    * Voronoi tesselation
        * [Creating voronoi sphere](http://meshlabstuff.blogspot.com.by/2009/03/creating-voronoi-sphere.html)
        * [Voronoi tetrahedron](http://www.thingiverse.com/thing:140277)
        * [Klein bottle](http://www.thingiverse.com/thing:145694)

# Embedded programming

* [Embedded programming]()


# CAD


## QCad

2D engineering drawing package based on Qt
Looks to be quite buggy and slow

* [wikipedia](https://en.wikipedia.org/wiki/QCad)
* [Github](https://github.com/qcad/qcad)
* [Compiling from source](http://www.qcad.org/en/component/content/article/78-qcad/111-qcad-compilation-from-sources#linux)


# More specific software

* [Wireshark]()
* [Vim]()
* [Ssh]()
* [XML and XSL]()

## Paper backup

libdmtx offers possibility to print [datamatrix](https://en.wikipedia.org/wiki/Data_Matrix) code to pdf file, it also operates on scanned images (at least it works ok for rotated image).

Maximum amount stored in single datamatrix is 1556 bytes.
```bash
apt-get install dmtx-utils
```

## QR code recognition

* zbarcam

# Multithreading
* [Multithreading]()



# Personal projects

* [Sphinx train]()
* [Android experience sampling]()
* [Maple-mini water meter logging]()
* [Maple-mini pwm current]()


# Build systems

* OBS -- open build system
* Phabricator
* OSTree

# People

* [Leslie Lamport papers](https://lamport.azurewebsites.net/pubs/pubs.html#euclid)

# General blah-blah

## Conferences

* [Highload: talks archives](https://www.youtube.com/user/profyclub/videos)

## Knuth against Dijkstra;)

[Structured programming with goto statements](http://dl.acm.org/citation.cfm?id=1241535)

## Interviews

### A conversation with Alan Kay 
* [A conversation with Alan Kay](https://www.doc.ic.ac.uk/~susan/475/AlanKay.html)

..If you look at software today, through the lens of the history of engineering, it’s certainly engineering of a sort—but it’s the kind of engineering that people without the concept of the arch did. Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves....

...One could actually argue—as I sometimes do—that the success of commercial personal computing and operating systems has actually led to a considerable retrogression in many, many respects.

You could think of it as putting a low-pass filter on some of the good ideas from the ’60s and ’70s, as computing spread out much, much faster than educating unsophisticated people can happen. In the last 25 years or so, we actually got something like a pop culture, similar to what happened when television came on the scene and some of its inventors thought it would be a way of getting Shakespeare to the masses. But they forgot that you have to be more sophisticated and have more perspective to understand Shakespeare. What television was able to do was to capture people as they were...

Interesting things mentioned

* Lisp late binding
* [Lucid programming language](https://en.wikipedia.org/wiki/Lucid_%28programming_language%29), [pdf document describing language](http://www.cse.unsw.edu.au/~plaice/archive/WWW/1985/B-AP85-LucidDataflow.pdf) (Strachey streams) -- archetypal filter-based programming. Each function is a filter, each variable is a stream of values (thus, no assignment, just stream copying and filtering).
* [Burroughs B5000](https://en.wikipedia.org/wiki/Burroughs_large_systems#B5000) Bob Barton (to give you an interesting benchmark—on roughly the same system, roughly optimized the same way, a benchmark from 1979 at Xerox PARC runs only 50 times faster today. Moore’s law has given us somewhere between 40,000 and 60,000 times improvement in that time. So there’s approximately a factor of 1,000 in efficiency that has been lost by bad CPU architectures.) [Emulation project](http://retro-b5500.blogspot.com.by/) [Manual of the later processor+some explanations Organick](bitsavers.org/pdf/burroughs/B5000_5500_5700/Organick_Computer_System_Organization_The_B5700_B6700_Series_1973.pdf)
* [Imp programming language](https://en.wikipedia.org/wiki/IMP_%28programming_language%29) -- [language manual](http://www.saildart.org/IMP.BO\[11,DOC\]1) *http://www.saildart.org/IMP.BO[11,DOC]1*, [implementation](http://pdp-10.trailing-edge.com/decuslib10-03/01/43,50270/spell.lst.html) -- language that allowed syntax extension using BNF.
* Joss as a better alternative to Basic (there was always a language better than Basic for that purpose. That language was Joss, which predated Basic and was beautiful. )

## Suck less

* [suckless.org](http://suckless.org)
* [Why UML sucks](https://archive.eiffel.com/doc/manuals/technology/bmarticles/uml/page.html)

# See also

* [Speech recognition]()
* [Image processing]()
* [Machine Learning]()