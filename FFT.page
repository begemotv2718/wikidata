---
categories: mathematics,numerics,hardware,DSP
...

# General

* [Cooley-Tukey FFT algorithm](https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm)
```
 algorithm iterative-fft is
    input: Array a of n complex values where n is a power of 2
    output: Array A the DFT of a

    bit-reverse-copy(a,A)
    n ← a.length 
    for s = 1 to log(n)
        m ← 2s
        ωm ← exp(−2πi/m) 
        for k = 0 to n-1 by m
            ω ← 1
            for j = 0 to m/2 - 1
                t ← ω A[k + j + m/2]
                u ← A[k + j]
                A[k + j] ← u + t
                A[k + j + m/2] ← u - t
                ω ← ω ωm
   
    return A
```

# Fixed point FFT implementations

* [gist: license not clear](https://gist.github.com/Tomwi/3842231) Cooley-Tukey with bit reordering
* [kissfft: BSD license](https://sourceforge.net/projects/kissfft/)

# Bit reversing

* [Address generators for mapping arrays in bit-reversed order](http://ieeexplore.ieee.org/document/1299102/?reload=true) DOI: 10.1109/TSP.2004.827148 
* [Bit Reversal on Uniprocessors A. Karp](http://epubs.siam.org/doi/10.1137/1038001) DOI:10.1137/1038001
* [In-place permuting and perfect shuffling using involutions](http://www.sciencedirect.com/science/article/pii/S0020019013000719?via%3Dihub) DOI: 10.1016/j.ipl.2013.02.017 mostly useless

# General FFT

* [General framework for FFT: polynomial multiplication (Nipun Ramakrishnan, quora)](https://www.quora.com/What-is-the-most-amazing-algorithm-you-know/answer/Nipun-Ramakrishnan)

# Sparse FFT -- faster than logarithmic (even faster than linear)

* [SFFT list of papers](https://groups.csail.mit.edu/netmit/sFFT/paper.html)


# See also

* [Parent: DSP](Digital signal processing)