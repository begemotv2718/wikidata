---
categories: git
format: Markdown
...

# Cheat sheet: move existing repository to github

* Create new repository on github: be sure to **not** preinitialize it with README or License
* Issue the following git commands

```bash
    git remote remove origin
    git remote add origin ssh://git@github.com/begemotv2718/repo.git
    git push -u origin master
```

# Rebase instead of merge

```bash
git reset --hard HEAD~1
git fetch origin <branch>
git rebase origin/master
```

```
git pull --rebase
```

**Danger!** Uncommited files can be lost. Do git stash before this operation.

# Make git subdirectory into separate project

```bash
git clone messy_project/ clean_project/
cd clean_project/
git filter-branch --subdirectory-filter <subdir_name> -- --all
```

# Git stage only part of changes

```bash
git add -p
```
* y - to add hunk
* s - to split hunk
* e - to edit hunk


# Git move master to other branch

```
git branch -m master old_master
git branch -m new_branch master
```

# Git with submodules

First time after checking out repository with submodules

```
git submodule update --init --recursive
```

Subsequently

```
git submodule update --recursive
```

# Whitespace changes

```git merge -s recursive -Xignore-space-at-eol```

But using ```-Xignore-space-change``` is also a possibility    

Also    ```git merge master -s recursive -X renormalize```

--[Is it possible for git-merge to ignore line-ending differences? - Stack Overflow](https://stackoverflow.com/questions/861995/is-it-possible-for-git-merge-to-ignore-line-ending-differences)

# Display log with multiple branches pretty in terminal

* All branches ```git log --graph --oneline --all```

* Just two branches ```git log --graph --oneline currentbranch otherbranch```