---
categories: hardware
...

# Gas sensors

## CO2 sensors

* [Triggering article -- habr, BarsMonster](https://habrahabr.ru/post/187210/)

### Non-dispersive IR

#### Theory

* [Nondispersive infrared sensor](https://en.wikipedia.org/wiki/Nondispersive_infrared_sensor)
* [CO2 absorption spectrum](http://webbook.nist.gov/cgi/cbook.cgi?ID=C124389&Type=IR-SPEC&Index=1#IR-SPEC)

#### Shopping

* [Expensive CO2 sensors](http://www.co2meter.com/collections/co2-sensors)
* [NDIR CO2 sensor on AliExpress](https://ru.aliexpress.com/item/1pcs-MH-Z19-NDIR-CO2-Sensor-Module-infrared-co2-sensor-0-5000ppm-for-CO2-Monitor-Carbon/32897809434.html)

Google for MH-Z19

#### Dadget sensor

* [Deciphering data](https://hackaday.io/project/5301/logs/sort/newest)

* Script

```python
#!/usr/bin/env python

import sys, fcntl, time

def decrypt(key,  data):
    cstate = [0x48,  0x74,  0x65,  0x6D,  0x70,  0x39,  0x39,  0x65]
    shuffle = [2, 4, 0, 7, 1, 6, 5, 3]
    
    phase1 = [0] * 8
    for i, o in enumerate(shuffle):
        phase1[o] = data[i]
    
    phase2 = [0] * 8
    for i in range(8):
        phase2[i] = phase1[i] ^ key[i]
    
    phase3 = [0] * 8
    for i in range(8):
        phase3[i] = ( (phase2[i] >> 3) | (phase2[ (i-1+8)%8 ] << 5) ) & 0xff
    
    ctmp = [0] * 8
    for i in range(8):
        ctmp[i] = ( (cstate[i] >> 4) | (cstate[i]<<4) ) & 0xff
    
    out = [0] * 8
    for i in range(8):
        out[i] = (0x100 + phase3[i] - ctmp[i]) & 0xff
    
    return out

def hd(d):
    return " ".join("%02X" % e for e in d)

if __name__ == "__main__":
    # Key retrieved from /dev/random, guaranteed to be random ;)
    key = [0xc4, 0xc6, 0xc0, 0x92, 0x40, 0x23, 0xdc, 0x96]
    
    fp = open(sys.argv[1], "a+b",  0)
    logfile = open(sys.argv[2],"a",1) # open line buffered
    
    HIDIOCSFEATURE_9 = 0xC0094806
    set_report = "\x00" + "".join(chr(e) for e in key)
    fcntl.ioctl(fp, HIDIOCSFEATURE_9, set_report)
    
    values = {}
    
    while True:
        data = list(ord(e) for e in fp.read(8))
        decrypted = decrypt(key, data)
        if decrypted[4] != 0x0d or (sum(decrypted[:3]) & 0xff) != decrypted[3]:
            print hd(data), " => ", hd(decrypted),  "Checksum error"
            #pass
        else:
            op = decrypted[0]
            val = decrypted[1] << 8 | decrypted[2]
            
            values[op] = val
            
            # Output all data, mark just received value with asterisk
            #print ", ".join( "%s%02X: %04X %5i" % ([" ", "*"][op==k], k, v, v) for (k, v) in sorted(values.items())), "  ", 
            ## From http://co2meters.com/Documentation/AppNotes/AN146-RAD-0401-serial-communication.pdf
            #if 0x50 in values:
            #    print "xxCO2: %4i" % values[0x50], 
            #if 0x42 in values:
            #    print "xxT: %2.2f" % (values[0x42]/16.0-273.15), 
            #if 0x44 in values:
            #    print "xxRH: %2.2f" % (values[0x44]/100.0), 
            #print
            if(0x50 in values and 0x42 in values):
                print time.time(),
                print " CO2: %4i" % values[0x50],
                print " T: %2.2f" %  (values[0x42]/16.0-273.15),
                print
                logfile.write("%5.2f %4i %2.2f\n" %(time.time(),values[0x50],(values[0x42]/16.0-273.15)))
                del values[0x42]
                del values[0x50]
                time.sleep(10)

```

```
set xdata time
set timefmt "%s"
set format x "%H:%M:%S
plot "/tmp/mylog.log" using ($1+3*3600):2 with lines, "/tmp/mylog.log" using ($1+3*3600):(($3-10)*100) with lines;

```

#### Fitting data

[Fitting exp + constant : math stackexchange](http://math.stackexchange.com/questions/1337601/fit-exponential-with-constant/1337641#1337641?newreg=c612c046369946dfbf5c1dc512f04e56)

There the interesting method is suggested: we rewrite our exponential process as an integro-differential equation

$$y-y_0 = -\alpha (x-x_0) + \beta \int_{x_0}^{x} y(u) du$$

and then approximate integral sums $$ S_k= \frac{1}{2}(y_k+y_{k-1})(x_k-x_{k-1}) +S_{k-1} $$. Then we end up with linear problem to find least squares approximation for $\alpha$ and $\beta$.



### Electrochemichal

# pH sensor

* [Самодельный электронный pH-метр](http://www.gidroponika.su/gidroponika-svoimi-rukami.html/myopit/samodelnyj-jelektronnyj-ph-metr.html)

Рекомендуют электрод ЭСК-10608/7, в остальном малополезно, возможно есть линк на покупку электродов

## Shopping

[Продажа электродов](http://www.ormet.ru/catalog?id=49) (около 50 USD)

[Sparkfun](https://www.sparkfun.com/products/10972) (Около 150 USD)

[Amazon](https://www.amazon.com/gp/product/B001EHJO64/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&tag=66pacificcom-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B001EHJO64) 34 USD


# Temperature sensors

## Thermocouples

* [Voltage/temperature interpolation](https://srdata.nist.gov/its90/download/allcoeff.tab)
* [TI app note for MSP430 integration with thermocouple](http://www.ti.com/lit/an/slaa501/slaa501.pdf)
* MAX31855, MAX6675 -thermocouple/digital ifaces

## IR temperature sensors

* [MLX90614: Single and Dual Zone IR Thermometer in TO-39](https://www.sparkfun.com/datasheets/Sensors/Temperature/MLX90614_rev001.pdf)

# GPS

## NMEA GPS protocol 

The signal is transmitted over usual UART port

* [Wiki on NMEA 0183](https://ru.wikipedia.org/wiki/NMEA_0183)
* [NMEA for boats](http://www.boat-project.com/tutorials/nmea0183.htm)
* [Arduino tutorial on GPS interfacing](http://playground.arduino.cc/Tutorials/GPS)




Parallax module, the following strings are automatically transmitted when the "/RAW" pin is pulled low:

* \$GPGGA: Global Positioning System Fix Data
* \$GPGSV: GPS satellites in view
* \$GPGSA: GPS DOP and active satellites
* \$GPRMC: Recommended minimum specific GPS/Transit data 

### Example

```
 eg1. $GPRMC,081836,A,3751.65,S,14507.36,E,000.0,360.0,130998,011.3,E*62
 eg2. $GPRMC,225446,A,4916.45,N,12311.12,W,000.5,054.7,191194,020.3,E*68

           225446       Time of fix 22:54:46 UTC
           A            Navigation receiver warning A = Valid position, V = Warning
           4916.45,N    Latitude 49 deg. 16.45 min. North
           12311.12,W   Longitude 123 deg. 11.12 min. West
           000.5        Speed over ground, Knots
           054.7        Course Made Good, degrees true
           191194       UTC Date of fix, 19 November 1994
           020.3,E      Magnetic variation, 20.3 deg. East
           *68          mandatory checksum

 eg3. $GPRMC,220516,A,5133.82,N,00042.24,W,173.8,231.8,130694,004.2,W*70
              1    2    3    4    5     6    7    8      9     10  11 12

      1   220516     Time Stamp
      2   A          validity - A-ok, V-invalid
      3   5133.82    current Latitude
      4   N          North/South
      5   00042.24   current Longitude
      6   W          East/West
      7   173.8      Speed in knots
      8   231.8      True course
      9   130694     Date Stamp
      10  004.2      Variation
      11  W          East/West
      12  *70        checksum

 eg4. for NMEA 0183 version 3.00 active the Mode indicator field is added
     $GPRMC,hhmmss.ss,A,llll.ll,a,yyyyy.yy,a,x.x,x.x,ddmmyy,x.x,a,m*hh
 Field #
 1    = UTC time of fix
 2    = Data status (A=Valid position, V=navigation receiver warning)
 3    = Latitude of fix
 4    = N or S of longitude
 5    = Longitude of fix
 6    = E or W of longitude
 7    = Speed over ground in knots
 8    = Track made good in degrees True
 9    = UTC date of fix
 10   = Magnetic variation degrees (Easterly var. subtracts from true course)
 11   = E or W of magnetic variation
 12   = Mode indicator, (A=Autonomous, D=Differential, E=Estimated, N=Data not valid)
 13   = Checksum
```

## Precision time modules

* [U-blox](https://www.u-blox.com/en/timing)

This module was used to provide reference for internal oscillator on sound card in the interesting experiment on [measuring  distance to ionosphere using dcf77 source](https://video.fosdem.org/2017/AW1.120/dcf77.vp8.webm) (FOSDEM, 2017)


## RTKLIB -- enhanced precision

* [Rtklib site](http://www.rtklib.com/)

## Interesting libraries and spoofing

* [Github osqzss](https://github.com/osqzss)
* [Paper on spoofing](https://priyasloka.wordpress.com/2018/04/08/gps-simulation-using-hackrf/)

# FLIR -- Deep infrared cameras

* [Github project with FLIR camera](https://github.com/maxritter/DIY-Thermocam)

## Shopping

Currently 60x60 and 60x80 cameras became affordable.

* [Sparkfun 60x80 FlIR camera](https://www.sparkfun.com/products/13233)

# MQ Sensors



http://geektimes.ru/post/255286/
В статье описывается устройство для измерения, индикации на встроенном дисплее и передачи в сеть по Wi-Fi параметров окружающей среды:

* уровень СО2 (углекислый газ)
* уровень СО (угарный газ)
* содержание паров этилового спирта (С2Н5ОН)
* уровень горючих газов (LPG)
* уровень аммиака (NH3)
* содержание водорода(H2)
* значения атмосферного давления
* влажности и температуры воздуха
* уровня освещенности
* уровня магнитного поля по трем осям
* уровня гравитации по трем осям
* уровня ускорений по трем осям
* температуры произвольного количества цифровых датчиков температуры типа DS18B20.

[MQ sensors description: arduino playground](http://playground.arduino.cc/Main/MQGasSensors)

Некоторые так вот просто и называются: air quality sensor (MQ-135: benzene, alcohol, smoke)



[Вот еще интересный сенсор](http://www.seeedstudio.com/wiki/Grove_-_Multichannel_Gas_Sensor)
Правда,  довольно дорогой $40 в seeed studio.
К нему есть библиотека для ардуины: https://github.com/Seeed-Studio/Mutichannel_Gas_Sensor

* [Непосредственно сенсор](https://eu.mouser.com/ProductDetail/Amphenol-SGX-Sensortech/MICS-6814/?qs=sGAEpiMZZMs29kr3d%252bndI0i0Qyk5MgFhyd%2FyHPzK%2FyY%3D)

Диапазоны измерений:

* Carbon monoxide CO 1 – 1000ppm
* Nitrogen dioxide NO2 0.05 – 10ppm
* Ethanol C2H6OH 10 – 500ppm
* Hydrogen H2 1 – 1000ppm
* Ammonia NH3 1 – 500ppm
* Methane CH4 >1000ppm
* Propane C3H8 >1000ppm
* Iso-butane C4H10 >1000ppm





Для справки ПДК по некоторым веществам:


* CO -- 25-50ppm (USA)
* NO2 -- 3-5ppm
* NH3 -- 50ppm

### Theory of operation of SnO~2~ sensors

* [IOP paper](http://iopscience.iop.org/article/10.1088/0957-0233/4/7/001)

General idea: SnO~2~ is a semiconductor with high affinity to oxigen. The agents reducing oxigen (such as various combustible 

### CO health effects 

|Concentration | Symptoms |
|--------------|----------|
|35 ppm |Headache and dizziness within six to eight hours of constant exposure|
|100 ppm|Slight headache in two to three hours|
|200 ppm|Slight headache within two to three hours; loss of judgment|
|400 ppm|Frontal headache within one to two hours|
|800 ppm|Dizziness, nausea, and convulsions within 45 min; insensible within 2 hours|
|1,600 ppm|Headache, [[tachycardia|increased heart rate]], dizziness, and nausea within 20 min; death in less than 2 hours|
|3,200 ppm|Headache, dizziness and nausea in five to ten minutes. Death within 30 minutes.|
|6,400 ppm|Headache and dizziness in one to two minutes. Convulsions, respiratory arrest, and death in less than 20 minutes.|
|12,800 ppm|Unconsciousness after 2–3 breaths. Death in less than three minutes.|

### MQ table

| Sensor  |  Sensitivity                     | $V_H$        |  Type  | Concentration | Datasheet ref      | 
|---------|----------------------------------|--------------|--------|---------------|--------------------|
| MQ-2    |  Methane, butane, LPG, Smoke, CO | $5.0V\pm0.1$ |  Rs    | 100 -- 1000ppm| [1](https://www.pololu.com/file/0J309/MQ2.pdf)|
| MQ-3    |  Alcohol gas                     | $5.0V\pm0.2$ |  Rs    | 0.04-4 mg/L   | [2](https://www.pololu.com/file/0J310/MQ3.pdf)|
| MQ-4    |  Natural gas, Methane            | $5.0V\pm0.2$ |  Rs    | 300-10000ppm  | [3](https://www.pololu.com/file/0J311/MQ4.pdf)|
| MQ-5    |  Methane, LPG, town gas, iso-butane, propane slightly alcohol, co| $5.0V\pm0.1$ | Rs | 200-10000ppm | [4](https://www.parallax.com/sites/default/files/downloads/605-00009-MQ-5-Datasheet.pdf) | MQ-6    | LPG, iso-butane, propane,LNG     | $5.0V\pm0.1$ |  Rs    |  200-10000ppm | [5](https://www.sparkfun.com/datasheets/Sensors/Biometric/MQ-6.pdf)|
| MQ-7    | CO, also sensitive to H~2~       | 5.0V, 1.4V alternating| Rs | 20ppm-2000ppm | [6](https://www.sparkfun.com/datasheets/Sensors/Biometric/MQ-7.pdf) |
| MQ-8    | H~2~, small sensitivity to alcohol, even smaller to CO| 5.0V | Rs | 100-10000ppm  | [7](https://dlnmh9ip6v2uc.cloudfront.net/datasheets/Sensors/Biometric/MQ-8.pdf) |

# Finger tracking

* [Hackster.io: Finger tracking with encoded light](https://blog.hackster.io/this-system-uses-encoded-light-for-millimeter-level-finger-tracking-9d0029acc55b) Photosensors on fingers, DLP projector to provide encoded light.


# Optical flow

* [Pixart](http://www.pixart.com.tw/product_data.asp?product_id=168&productclassify_id=19&productclassify2_id=53&productclassify_name=Optical%20Motion%20Tracking&productclassify2_name=Optical%20Flow&partnumber=PMW3901MB-TXQT)  small form factor sensor
* [Pixart with pcb](https://www.tindie.com/products/onehorse/pmw3901-optical-flow-sensor/#product-name) PMW3901

# See also

* [Electrophysiology]()