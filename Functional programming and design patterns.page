---
categories: functional_programming, design_patterns
...

# Motivation

I more or less understand functional programming. However, every single hiring/assesment panel worries about bullshit like design patterns. Therefore it would be nice to be prepared to answer.

More humble motivation: man should be skilled in different way of thinking.

# Links collection

## Scott Wlaschin  Functional Programming Patterns

[Link](http://www.slideshare.net/ScottWlaschin/fp-patterns-buildstufflt)

Presentation is 249 pages long. 

Interesting ones:

| OOP            | Functional programming |
|----------------|------------------------|
| Single resp    | Functions              |
| Open/closed    | Functions              |
| Dep. inversion | Functions              |
| etc.           | Functions;)            |
|----------------|------------------------|

What we envisioned: Smalltalk. 
What we got: C++, Object oriented Cobol, PHP, Java

Actually the presentation itself is about best practices in functional programming. There nothing here concerning parallels of the GoF design patterns and FP structures. Not helpful to the goal but somewhat amusing.

#### Ideas
* Aim for totality (include constrains on the function domain in type)
* Make illegal states irrepresentable (include errors in type)
* Algebraic sum type is better than inheritance??? (not clear why)
* Transformation oriented programming ( Input -> (transform to internal model) -> Internal model -> (transform from internal model) -> Output)
* Functions are interfaces
* Continuations ( pass functions to handle internal conditions in his case)
* Monads for error handling, Monoids, etc. Nothing really fancy here

## Norvig

[Design Patterns in Dynamic Languages](http://norvig.com/design-patterns/)

## Stackoverflow thread

[Does Functional Programming Replace GoF Design Patterns?](http://stackoverflow.com/questions/327955/does-functional-programming-replace-gof-design-patterns)

### Some notable citations

design patterns *in general* only exist to patch up shortcomings in the language. And if another language can solve the same problem trivially, that other language won't have need of a design pattern for it. Users of that language may not even be aware that the problem exists, because, well, it's not a problem in that language.

## Design patterns in terms of Haskell

[Design Patterns in Haskell](http://blog.ezyang.com/2010/05/design-patterns-in-haskel/)

# See also

* [Design patterns]()
