---
categories: hardware,usb
...

* [USB in a NutShell](http://www.beyondlogic.org/usbnutshell/usb1.shtml)
* [USB made simple](http://www.usbmadesimple.co.uk/)

# USB HID

## General information

* [HID Information on USB.ORG](http://www.usb.org/developers/hidpage/)

## USB made simple

[Typical HID -- A mouse](http://www.usbmadesimple.co.uk/ums_5.htm)

## Wikipedia article

* [Wikipedia article](https://en.wikipedia.org/wiki/Human_interface_device)
* [Second wikipedia article](https://en.wikipedia.org/wiki/USB_human_interface_device_class)

###Summary

* Protocol produced by Microsoft
* Articles has prolonged discussion on keyboard and mice
* Only control and interrupt transfers are used. IN transaction (device to host) implemented for all devices OUT is optional

####Excerpt

The USB HID class requires that every device describes how it will communicate with the host device in order to accurately predict and define all current and future human interface devices. During enumeration the device describes how its reports are to be structured so that the host device can properly prepare to receive this information.

The host periodically polls the device's interrupt IN endpoint during operation. When the device has data to send it forms a report and sends it as a reply to the poll token. Common devices such as keyboards and mice send reports that are compliant with standards set by the USB Implementers Forum (USB-IF).[8] When a vendor makes a custom USB HID class device, the reports formed by the device need to match the report description given during enumeration and the driver installed on the host system. In this way it is possible for the USB HID class to be extremely flexible.
 

## Tutorial 1

[A closer look to USB HID Class](http://www.tracesystemsinc.com/USB_Tutorials_web/USB/B1_USB_Classes/Books/A3_A_Closer_Look_at_HID_Class/sbook2.htm)

* HID description can describe data up to 1 bit
* HID reports can include units and scale
* HID reports are wonderful!!!
* HIDMaker FS will do all magic for you!!!

## Instructables -- adapting Wii (i2c) joystick to USB

This is a tutorial on adapting Wii Classic Controller to use over USB. The project uses V-USB library.

[USB Descriptors](http://www.instructables.com/id/USB-Wii-Classic-Controller/step4/USB-Descriptors/)

## Linux -- writing HID devices

### Hidrd

[Github link](https://github.com/DIGImend/hidrd)

Hidrd is a library and a tool for reading, writing and converting HID report descriptors in/between various formats, with support as follows:

| Format                           | Reading | Writing |
| -------------------------------- | ------- | ------- |
| Native (binary)                  | Yes     | Yes     |
| XML                              | Yes     | Yes     |
| HID specification example format | No      | Yes     |
| C source code                    | No      | Yes     |

Hidrd contains `hidrd-convert` - a tool for converting report descriptors between formats. As it supports reading and writing XML, it is suitable for descriptor authoring and editing, on par with and in some ways better than the official [HID Descriptor Tool](http://www.usb.org/developers/hidpage#HID%20Descriptor%20Tool).

Advantages over the official tool include:
* running on *nix natively,
* reading native (binary) descriptors,
* smaller native descriptor output,
* non-interactive report descriptor generation, allowing for use in software/firmware builds.



# Habr links

## [Разбираем и собираем обратно стек USB](https://habrahabr.ru/post/236401/)
 Автор пытается сравнивать стек USB c сетевым стеком. В остальном статья полезна ссылками

### USB HID Demo from Raja

[USB HID Demo](https://habrahabr.ru/post/208026/)
[Github link](https://github.com/RavWin/RHIDDemo)

Использует StdPeriph библиотеку и Em::Blocks. Как выясняется Em::Blocks -- делает всю магию, думать там, кажется, не надо. Прямо автоматически генерируется проект с StdPeriph.

Что девайс умеет

* REPORT_ID = 1 и 2 — команда МК включить/выключить LED1/LED2. Содержит поле размером 1 бит с желаемым состоянием светодиода и поддерживает отправку как методом SET_REPORT так и методом SET_FEATURE (об этом чуть позже).
* REPORT_ID = 3 — передает один байт в МК. Просто, чтобы показать, как передать данные МК. Мы будем передавать положение ползунка.
* REPORT_ID = 4 — это репорт для передачи данных ПК. Возвращает информацию о текущем состоянии светодиодов, кнопок (если они есть) и возвращает переданный в репорте с ID=3 байт, чтобы показать, что данные приняты.

Данные обрабатываются просто с сырого буфера endpointа.

#### Device descriptors

```C

/* USB Standard Device Descriptor */
const uint8_t RHID_DeviceDescriptor[RHID_SIZ_DEVICE_DESC] =
  {
		    RHID_SIZ_DEVICE_DESC,         // общая длина дескриптора устройства в байтах
		    USB_DEVICE_DESCRIPTOR_TYPE, // bDescriptorType - показывает, что это за дескриптор. В данном случае - Device descriptor
		    0x00, 0x02,                 // bcdUSB - какую версию стандарта USB поддерживает устройство. 2.0

			// класс, подкласс устройства и протокол, по стандарту USB. У нас нули, означает каждый интерфейс сам за себя
		    0x00,                       //bDeviceClass
		    0x00,                       //bDeviceSubClass
		    0x00,                       //bDeviceProtocol

		    0x40,                       //bMaxPacketSize - максимальный размер пакетов для Endpoint 0 (при конфигурировании)

			// те самые пресловутые VID и PID,  по которым и определяется, что же это за устройство.
		    0x83, 0x04,                 //idVendor (0x0483)
		    0x11, 0x57,                 //idProduct (0x5711)

		    DEVICE_VER_L, DEVICE_VER_H,                 // bcdDevice rel. DEVICE_VER_H.DEVICE_VER_L  номер релиза устройства

			// дальше идут индексы строк, описывающих производителя, устройство и серийный номер.
			// Отображаются в свойствах устройства в диспетчере устройств
			// А по серийному номеру подключенные устройства с одинаковым VID/PID различаются системой.
		    1,                          //Index of string descriptor describing manufacturer
		    2,                          //Index of string descriptor describing product
		    3,                          //Index of string descriptor describing the device serial number
		    0x01                        // bNumConfigurations - количество возможных конфигураций. У нас одна.
  }
  ; /* CustomHID_DeviceDescriptor */

```

```C
/* USB Configuration Descriptor */
/*   All Descriptors (Configuration, Interface, Endpoint, Class, Vendor */
const uint8_t RHID_ConfigDescriptor[RHID_SIZ_CONFIG_DESC] =
  {
		    0x09, 			// bLength: длина дескриптора конфигурации
		    USB_CONFIGURATION_DESCRIPTOR_TYPE, // bDescriptorType: тип дескриптора - конфигурация
		    RHID_SIZ_CONFIG_DESC, 0x00, // wTotalLength: общий размер всего дерева под данной конфигурацией в байтах

		    0x01,         // bNumInterfaces: в конфигурации всего один интерфейс
		    0x01,         // bConfigurationValue: индекс данной конфигурации
		    0x00,         // iConfiguration: индекс строки, которая описывает эту конфигурацию
		    0xE0,         // bmAttributes: признак того, что устройство будет питаться от шины USB
		    0x32,         // MaxPower 100 mA: и ему хватит 100 мА

				/************** Дескриптор интерфейса ****************/
				0x09,         // bLength: размер дескриптора интерфейса
				USB_INTERFACE_DESCRIPTOR_TYPE, // bDescriptorType: тип дескриптора - интерфейс
				0x00,         // bInterfaceNumber: порядковый номер интерфейса - 0
				0x00,         // bAlternateSetting: признак альтернативного интерфейса, у нас не используется
				0x02,         // bNumEndpoints - количество эндпоинтов.

				0x03,         // bInterfaceClass: класс интерфеса - HID
				// если бы мы косили под стандартное устройство, например клавиатуру или мышь, то надо было бы указать правильно класс и подкласс
				// а так у нас общее HID-устройство
				0x00,         // bInterfaceSubClass : подкласс интерфейса.
				0x00,         // nInterfaceProtocol : протокол интерфейса

				0,            // iInterface: индекс строки, описывающей интерфейс

					// теперь отдельный дескриптор для уточнения того, что данный интерфейс - это HID устройство
					/******************** HID дескриптор ********************/
					0x09,         // bLength: длина HID-дескриптора
					HID_DESCRIPTOR_TYPE, // bDescriptorType: тип дескриптора - HID
					0x01, 0x01,   // bcdHID: номер версии HID 1.1
					0x00,         // bCountryCode: код страны (если нужен)
					0x01,         // bNumDescriptors: Сколько дальше будет report дескрипторов
						HID_REPORT_DESCRIPTOR_TYPE,         // bDescriptorType: Тип дескриптора - report
						RHID_SIZ_REPORT_DESC,	0x00, // wItemLength: длина report-дескриптора


					/******************** дескриптор конечных точек (endpoints) ********************/
					0x07,          // bLength: длина дескриптора
					USB_ENDPOINT_DESCRIPTOR_TYPE, // тип дескриптора - endpoints

					0x81,          // bEndpointAddress: адрес конечной точки и направление 1(IN)
					0x03,          // bmAttributes: тип конечной точки - Interrupt endpoint
					wMaxPacketSize, 0x00,    // wMaxPacketSize:  Bytes max
					0x20,          // bInterval: Polling Interval (32 ms)

          0x07,	/* bLength: Endpoint Descriptor size */
          USB_ENDPOINT_DESCRIPTOR_TYPE,	/* bDescriptorType: */
            /*	Endpoint descriptor type */
          0x01,	/* bEndpointAddress: */
            /*	Endpoint Address (OUT) */
          0x03,	/* bmAttributes: Interrupt endpoint */
          wMaxPacketSize,	/* wMaxPacketSize:  Bytes max  */
          0x00,
          0x20,	/* bInterval: Polling Interval (32 ms) */
}
  ; /* RHID_ConfigDescriptor */


```
     

```C
const uint8_t RHID_ReportDescriptor[RHID_SIZ_REPORT_DESC] =
  {
    0x06, 0x00, 0xff,              // USAGE_PAGE (Generic Desktop)
    0x09, 0x01,                    // USAGE (Vendor Usage 1)
    0xa1, 0x01,                    // COLLECTION (Application)
    0x85, 0x01,                    //   REPORT_ID (1)
    0x09, 0x01,                    //   USAGE (Vendor Usage 1)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x25, 0x01,                    //   LOGICAL_MAXIMUM (1)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x95, 0x01,                    //   REPORT_COUNT (1)
    0xb1, 0x82,                    //   FEATURE (Data,Var,Abs,Vol)
    0x85, 0x01,                    //   REPORT_ID (1)
    0x09, 0x01,                    //   USAGE (Vendor Usage 1)
    0x91, 0x82,                    //   OUTPUT (Data,Var,Abs,Vol)

    0x85, 0x02,                    //   REPORT_ID (2)
    0x09, 0x02,                    //   USAGE (Vendor Usage 2)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x25, 0x01,                    //   LOGICAL_MAXIMUM (1)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x95, 0x01,                    //   REPORT_COUNT (1)
    0xb1, 0x82,                    //   FEATURE (Data,Var,Abs,Vol)
    0x85, 0x02,                    //   REPORT_ID (2)
    0x09, 0x02,                    //   USAGE (Vendor Usage 2)
    0x91, 0x82,                    //   OUTPUT (Data,Var,Abs,Vol)

    0x85, 0x03,                    //   REPORT_ID (3)
    0x09, 0x03,                    //   USAGE (Vendor Usage 3)
    0x15, 0x00,                    //   LOGICAL_MINIMUM (0)
    0x26, 0xff, 0x00,              //   LOGICAL_MAXIMUM (255)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x95, RPT3_COUNT,                    //   REPORT_COUNT (N)
    0xb1, 0x82,                    //   FEATURE (Data,Var,Abs,Vol)
    0x85, 0x03,                    //   REPORT_ID (3)
    0x09, 0x03,                    //   USAGE (Vendor Usage 3)
    0x91, 0x82,                    //   OUTPUT (Data,Var,Abs,Vol)

    0x85, 0x04,                    //   REPORT_ID (4)
    0x09, 0x04,                    //   USAGE (Vendor Usage 4)
    0x75, 0x08,                    //   REPORT_SIZE (8)
    0x95, RPT4_COUNT,                    //   REPORT_COUNT (N)
    0x81, 0x82,                    //   INPUT (Data,Var,Abs,Vol)
    0xc0                           // END_COLLECTION
}


```

###Эмулятор ИБП на USB

[Реализация USB-интерфейса ИБП на основе ARM-платы MC HCK](https://geektimes.ru/post/258726/)

Здесь используется плата MC HCK, для нее вполне себе отдельная [опенсорсная библиотека](https://github.com/mchck/mchck)

Процессор [MK20DX32VLF5](https://github.com/mchck/mchck/wiki/MCU-Features---MK20DX32VLF5)

[Код проекта на GitHub](https://github.com/kolontsov/richcomm-ups-mchck/)

Как выясняется, никаким HID тут и не пахнет

#### Дескрипторы

```C
static const struct usb_desc_dev_t device_dev_desc = {
        .bLength = sizeof(struct usb_desc_dev_t),
        .bDescriptorType = USB_DESC_DEV,
        .bcdUSB = { .maj = 2 },
        .bDeviceClass = USB_DEV_CLASS_SEE_IFACE,
        .bDeviceSubClass = USB_DEV_SUBCLASS_SEE_IFACE,
        .bDeviceProtocol = USB_DEV_PROTO_SEE_IFACE,
        .bMaxPacketSize0 = EP0_BUFSIZE,
        .idVendor = RCM_VENDOR,
        .idProduct = RCM_PRODUCT,
        .bcdDevice = { .sub = 1 },
        .iManufacturer = 1,
        .iProduct = 2,
        .iSerialNumber = 3,
        .bNumConfigurations = 1,
}

static const struct usb_config_1 usb_config_1 = {
        .config = {
                .bLength = sizeof(struct usb_desc_config_t),
                .bDescriptorType = USB_DESC_CONFIG,
                .wTotalLength = sizeof(struct usb_config_1),
                .bNumInterfaces = 1,
                .bConfigurationValue = 1,
                .iConfiguration = 0, 
                .one = 1,
                .bMaxPower = 10
        },
        .usb_function_0 = {
                .iface = {
                        .bLength = sizeof(struct usb_desc_iface_t),
                        .bDescriptorType = USB_DESC_IFACE,
                        .bInterfaceNumber = 0, 
                        .bAlternateSetting = 0, 
                        .bNumEndpoints = 1,  
                        .iInterface = 0, 
                        .bInterfaceClass = RCM_CLASS,
                        .bInterfaceSubClass = RCM_SUBCLASS,
                        .bInterfaceProtocol = RCM_PROTOCOL,
                        .iInterface = 0
                },
                .int_in_ep = {
                        .bLength = sizeof(struct usb_desc_ep_t),
                        .bDescriptorType = USB_DESC_EP,
                        .bEndpointAddress = UPS_REPLY_EP,
                        .type = USB_EP_INTR,
                        .wMaxPacketSize = UPS_REPLY_EP_SIZE,
                        .bInterval = 0xFF
                }
        },
};


```

### USB HID stack in FreeBSD

[uhidd](https://wiki.freebsd.org/uhidd)


             