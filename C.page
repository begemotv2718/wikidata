---
categories: programming,programming_languages
...

* [Pike on C Style](http://www.lysator.liu.se/c/pikestyle.html)
* [Open source books on C](https://www.ossblog.org/learn-c-programming-with-9-excellent-open-source-books/)

# Undefined behavior

* [Undefined Behavior in 2017](https://blog.regehr.org/archives/1520)
* [A Guide to Undefined Behavior in C and C++, Part 1 – Embedded in Academia](https://blog.regehr.org/archives/213) Quite detailed and with explanations 
* [What Every C Programmer Should Know About Undefined Behavior #1/3](http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html) Clang blog entry describing many optimizations possible because of UB.
    * [Second part](http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html)
* [Type punning](https://en.wikipedia.org/wiki/Type_punning#Floating-point_example) AKA violation of strict aliasing rules.
* [Example of undefined behavior for integer overflow](https://www.airs.com/blog/archives/120)

* Code

```C
int f()
{
int i;
int j = 0;
for (i = 1; i > 0; i += i)
++j;
return j;
}
```

# Static checking

* CLANG based checkers
    * [Tutorial One · KLEE](http://klee.github.io/tutorials/testing-function/) Automatically generate test cases based on all paths through the function
    * [GitHub - kframework/c-semantics: Semantics of C in K](https://github.com/kframework/c-semantics) Hang on undefined behavior
        * [An Executable Semantics For C Is Useful – Embedded in Academia](https://blog.regehr.org/archives/523)
    * [Clang Static Analyzer](http://clang-analyzer.llvm.org/)

# MISRA C and safety critical 

* [JPL C coding guide (partly MISRA standard)](http://lars-lab.jpl.nasa.gov/JPL_Coding_Standard_C.pdf)
* [Ten commandments for safety critical code](http://www.pixelscommander.com/wp-content/uploads/2014/12/P10.pdf)

## Attempt to Gcc implementation: traces left

* [ggcc coding rules readme: Wayback Machine](http://web.archive.org/web/20080801212027/http://www.ggcc.info/files/README-codingrules_0.txt)
* [CTools:ICI:Plugins - cTuning.org](http://ctuning.org/wiki/index.php/CTools:ICI:Plugins)
* [Re: Announcement: initial release of a coding rule checker for GCC](https://www.mail-archive.com/gcc@gcc.gnu.org/msg36883.html)
* [GCC MELT site](http://starynkevitch.net/Basile/gcc-melt/) GCC MELT is now defunct project to extend gcc compiler with something like lisp Modern implementation: [bismon: github](
https://github.com/bstarynk/bismon)

# Memory leak checking

* See static code analysis in [Programming]()
* [Barr group: tutorial on writing instrumented malloc](https://barrgroup.com/Embedded-Systems/How-To/Detecting-Memory-Leaks-C)
* [Barr group: memory management in embedded](https://barrgroup.com/Embedded-Systems/How-To/Malloc-Free-Dynamic-Memory-Allocation)

# Compilers

* [TCC](https://bellard.org/tcc/) most minimalistic and fast
* [LCC](https://github.com/drh/lcc) - free for non-commercial use, but not possible to create derived works
* [LLVM -- extending llvm tutorial](https://llvm.org/docs/tutorial/)

## Interesting and/or historical

* [RatC compiler](http://linux-boss.narod.ru/ratc.html) книга Р.Берри, Б.Микинз "Язык Си Введение для программистов". Авторы книги предлагают изучить язык Си на примере транслятора RatC и приводят текст самого транслятора.
* [Compilers for Elbrus architecture](http://212.59.102.250/apt/pool/main/s/sp/)

# C interpreters

* [CINT](http://www.hanno.jp/gotom/Cint.html) gcc based. It is used in CERN ROOT project.
* Cling (clang based)
* [bic](https://github.com/hexagonal-sun/bic)

# Book of bad examples

[Massacring C pointers](https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html)