---
categories: programming,networking
...

# WDS 

Wireless distributed network. Useful to extend network without wired connection.

* [Set up on TP-Link](https://www.tp-link.com/ru/support/faq/227/)
* [Set up on openwrt](https://openwrt.org/docs/guide-user/network/wifi/relay_configuration)

# Wifi packets sniffing 

* Install aircrack-ng. Use airmon-ng to put card into monitor mode
* Run wireshark. Wlan interface should be in the list.
* Filters that seems to work:
    * wlan.addr==aa.bb.cc.dd...
* Wireshark site list of filters [wlan](https://www.wireshark.org/docs/dfref/w/wlan.html) [wlan_mgt](https://www.wireshark.org/docs/dfref/w/wlan_mgt.html) [wlan_aggregate](https://www.wireshark.org/docs/dfref/w/wlan_aggregate.html)

# Wifi disconnect reason

* [disconnection codes (wpa_supplicant)](https://www.toomanyatoms.com/computer/disconnection_codes.html)

# Wifi stages

* Authentication
* Association (can be denied based on authentication info)
* Data transfer

# Using card as both AP and wifi.

## Check that it is possible to use more than one interface on wifi.

```bash
iw list
```
look for the section: ```valid interface combinations:```

The result looks like this
```
	valid interface combinations:
		 * #{ managed } <= 1, #{ AP, P2P-client, P2P-GO } <= 1, #{ P2P-device } <= 1,
		   total <= 3, #channels <= 2
```

## Add another interface to wifi card.

```bash
iw phy phy0 interface add wlp3s1 type managed
```

## Setup hostapd

* Install hostapd
* By default hostapd starts with ifupdown interface. I'm happy with this.
* Edit ```/etc/network/interfaces```

```
iface wlp3s1 inet static
   hostapd /etc/hostapd/hostapd.conf
   address xxx
   netmask yyy
```

* Create ```/etc/hostapd/hostapd.conf```

```bash
zcat /usr/share/doc/hostapd/examples/hostapd.conf.gz > /etc/hostapd/hostapd.conf
```

```
#Important stuff to change
interface=wlp3s1
driver=nl80211
ssid=<ssid_name>
channel=11
ignore_broadcast_ssid=0 # =1 for hidden network

wpa=1 #  wpa=2 is better
## Key management algorithms ##
wpa_key_mgmt=WPA-PSK
 
## Set cipher suites (encryption algorithms) ##
## TKIP = Temporal Key Integrity Protocol
## CCMP = AES in Counter mode with CBC-MAC
wpa_pairwise=TKIP
rsn_pairwise=CCMP
 
## Shared Key Authentication ##
auth_algs=1
 
## Accept all MAC address ###
macaddr_acl=0
wpa_passphrase=pass_phrase_as_it_is

```


## Add interface to dhcp server 

* Edit ```/etc/default/isc-dhcp-server``` add wlp3s1 interface to the INTERFACES variable (separated by space)
* Add subnet in ```/etc/dhcp/dhcpd.conf```

# OpenVPN configuring

* [Config HowTo](https://openvpn.net/community-resources/how-to/)  Contains info about ```client-to-client``` option and routing.
* [How to start Openvpn service at boot time - Ask Fedora: Community Knowledge Base and Support Forum](https://ask.fedoraproject.org/en/question/23085/how-to-start-openvpn-service-at-boot-time/)
* [2x HOW TO | OpenVPN](https://openvpn.net/community-resources/how-to/#vpntype)

# iptables and NAT

Allowing NAT:

```bash
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
# OR
iptables -t nat -A POSTROUTING -s <internal subnet> -j MASQUERADE
# AND enable forwarding in the kernel
echo 1 > /proc/sys/net/ipv4/ip_forward
```

Also the FORWARD table on the default table should allow the reply packet to come through. Either it should have policy ACCEPT, or the traffic between WAN interface (eth0 in the example above) and the restricted network interface (e.g. tun1) should be enabled

```bash
iptables -A FORWARD -i eth0 -o tun1 -j ACCEPT
iptables -A FORWARD -i tun1 -o eth0 -j ACCEPT
```
In principle it is possible to allow only established and related state packets to go from eth0 to tun1.

```bash
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -i eth0 -o tun1 -j ACCEPT
```

Some sites:

* [Linux Native Firewall : Introduction to IPtables - GloboTech Blog](https://www.globo.tech/learning-center/linux-native-firewall-introduction-to-iptables/)
* [Step-By-Step Configuration of NAT with iptables](https://www.howtoforge.com/nat_iptables)
* [7.4. FORWARD and NAT Rules](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Security_Guide/s1-firewall-ipt-fwd.html)

# Protocols 

## TCP

* [TCP in a nutshell](http://www.cs.miami.edu/home/burt/learning/Csc524.032/notes/tcp_nutshell.html) 
