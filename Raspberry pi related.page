---
categories: linux, hardware
...

# Kernel

* [Kernel modules writing](Linux kernel#writing-kernel-module-for-raspberry-pi)

# Framebuffer

* [Working with framebuffer for raspberry pi](http://raspberrycompote.blogspot.com.by/2013/04/low-level-graphics-on-raspberry-pi-part.html)

## Summary

```c
fbfd = open("/dev/fb0", O_RDWR);
ioctl(fbfd, FBIOGET_VSCREENINFO, &vinfo);
screensize = vinfo.xres * vinfo.yres * vinfo.bits_per_pixel / 8;
fbp = (char*)mmap(0, 
              screensize, 
              PROT_READ | PROT_WRITE, 
              MAP_SHARED, 
              fbfd, 
              0);
void put_pixel_RGB565(int x, int y, int r, int g, int b)
{
    // calculate the pixel's byte offset inside the buffer
    // note: x * 2 as every pixel is 2 consecutive bytes
    unsigned int pix_offset = x * 2 + y * finfo.line_length;

    // now this is about the same as 'fbp[pix_offset] = value'
    // but a bit more complicated for RGB565
    //unsigned short c = ((r / 8) << 11) + ((g / 4) << 5) + (b / 8);
    unsigned short c = ((r / 8) * 2048) + ((g / 4) * 32) + (b / 8);
    // write 'two bytes at once'
    *((unsigned short*)(fbp + pix_offset)) = c;

}
```

# Bare bones raspberry pi

This is a kind of microproject, possibly useful for our course. The idea is to have a minimal startable program that can be used instead of kernel.img on the boot device. The output can be either UART or GPIO.

* OSDEV wiki: [Raspberry pi bare bones](https://wiki.osdev.org/Raspberry_Pi_Bare_Bones)
* [raspberrypi org asm bare bones](https://www.raspberrypi.org/forums/viewtopic.php?t=201960)
* Qemu rpi bare bones
    * [Emulate rpi with qemu](https://azeria-labs.com/emulate-raspberry-pi-with-qemu/)
    * [U-boot for arm on qemu](https://balau82.wordpress.com/2010/03/10/u-boot-for-arm-on-qemu/)
    * [Hello world on bare metal qemu](https://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/)
    * [Another simplest program on bare metal qemu](https://balau82.wordpress.com/2010/02/14/simplest-bare-metal-program-for-arm/)

* [habr bare bone gpio, based on tutorial for Rust OS](https://habrahabr.ru/post/349248/)
* Book: Modern Assembly Language Programming with the ARM Processor Autor: Larry D. Pyeatt -- some references on UART