---
categories: linux, hardware
...

# Kernel

* [Kernel modules writing](Linux kernel#writing-kernel-module-for-raspberry-pi)

# Framebuffer

* [Working with framebuffer for raspberry pi](http://raspberrycompote.blogspot.com.by/2013/04/low-level-graphics-on-raspberry-pi-part.html)

## Summary

```c
fbfd = open("/dev/fb0", O_RDWR);
ioctl(fbfd, FBIOGET_VSCREENINFO, &vinfo);
screensize = vinfo.xres * vinfo.yres * vinfo.bits_per_pixel / 8;
fbp = (char*)mmap(0, 
              screensize, 
              PROT_READ | PROT_WRITE, 
              MAP_SHARED, 
              fbfd, 
              0);
void put_pixel_RGB565(int x, int y, int r, int g, int b)
{
    // calculate the pixel's byte offset inside the buffer
    // note: x * 2 as every pixel is 2 consecutive bytes
    unsigned int pix_offset = x * 2 + y * finfo.line_length;

    // now this is about the same as 'fbp[pix_offset] = value'
    // but a bit more complicated for RGB565
    //unsigned short c = ((r / 8) << 11) + ((g / 4) << 5) + (b / 8);
    unsigned short c = ((r / 8) * 2048) + ((g / 4) * 32) + (b / 8);
    // write 'two bytes at once'
    *((unsigned short*)(fbp + pix_offset)) = c;

}
```

## Setting up framebuffer for spi display

Main guidance come from [ili9341 Raspberry Pi guide â€“ Pi0cket](https://pi0cket.com/ili9341-raspberry-pi-guide/)

Some notes on actual behavior:

* Do not forget to modprobe spi-bcm2835 for spi functions
* ```modprobe fbtft-device name=rpi-display debug=1``` works good if we switch reset pin to GPIO23
* ```modprobe fb_ili9341``` otherwise nothing works
* Use ```con2fbmap 1 1``` to switch consoles. con2fbmap is not present in buildroot, I compiled it from [source](https://gitlab.com/pibox/con2fbmap).



# Bare bones raspberry pi

This is a kind of microproject, possibly useful for our course. The idea is to have a minimal startable program that can be used instead of kernel.img on the boot device. The output can be either UART or GPIO.

* OSDEV wiki: [Raspberry pi bare bones](https://wiki.osdev.org/Raspberry_Pi_Bare_Bones)
* [raspberrypi org asm bare bones](https://www.raspberrypi.org/forums/viewtopic.php?t=201960)
* Qemu rpi bare bones
    * [Emulate rpi with qemu](https://azeria-labs.com/emulate-raspberry-pi-with-qemu/)
    * [U-boot for arm on qemu](https://balau82.wordpress.com/2010/03/10/u-boot-for-arm-on-qemu/)
    * [Hello world on bare metal qemu](https://balau82.wordpress.com/2010/02/28/hello-world-for-bare-metal-arm-using-qemu/)
    * [Another simplest program on bare metal qemu](https://balau82.wordpress.com/2010/02/14/simplest-bare-metal-program-for-arm/)

* [habr bare bone gpio, based on tutorial for Rust OS](https://habrahabr.ru/post/349248/)
* Book: Modern Assembly Language Programming with the ARM Processor Autor: Larry D. Pyeatt -- some references on UART

# GPIO map, altunctions

* [map on elinux](https://elinux.org/RPi_BCM2835_GPIOs)
* [BCM2835 datasheet](https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf) Note: 2837 datasheet is not available
* [Setting i2c speed](https://michaelfranzl.com/2016/11/10/setting-i2c-speed-raspberry-pi/)
* [Schematics reduced](https://www.raspberrypi.org/documentation/hardware/raspberrypi/schematics/README.md)

# U-boot

```
mmc dev 0  
fatload mmc 0:1 ${kernel_addr_r} zImage  
fatload mmc 0:1 0x2000000 bcm2710-rpi-3-b.dtb  
setenv bootargs 8250.nr_uarts=1 root=/dev/mmcblk0p2 rootwait console=ttyS0,115200
bootz ${kernel_addr_r} - 0x2000000
```

# SPI

Spi speed 

> The Raspberry Pi SPI runs at APB clock speed, which is equivalent to core clock speed, 250 MHz. This can be divided by any even number from 2 to 65536 for the desired speed. The datasheet specifies that the divisor must be a power of two, but this is incorrect. Odd numbers are rounded down, and 0 (or 1) is equivalent to 65536. A divisor smaller than 2 is therefore impossible.

> This makes the frequency range be from 3.814 kHz to 125 MHz, with 32768 steps in between.

[ref](https://raspberrypi.stackexchange.com/questions/699/what-spi-frequencies-does-raspberry-pi-support)


# Hardware acceleration of encoding/decoding

* [Build ffmpeg with openmax support](https://github.com/legotheboss/YouTube-files/wiki/(RPi)-Compile-FFmpeg-with-the-OpenMAX-H.264-GPU-acceleration)
    * Summary

```
sudo apt-get install libomxil-bellagio-dev -y
git clone https://github.com/FFmpeg/FFmpeg.git
cd FFmpeg
sudo ./configure --arch=armel --target-os=linux --enable-gpl --enable-omx --enable-omx-rpi --enable-nonfree
```

## Libopenmax examples

* [gagle/raspberrypi-openmax-h264](https://github.com/gagle/raspberrypi-openmax-h264)
* [Introduction to OpenMAX on the Raspberry Pi | Kwasi-ich](https://kwasi-ich.de/blog/2017/11/26/omx/)
* [tjormola/rpi-openmax-demos](https://github.com/tjormola/rpi-openmax-demos/) [Explanations](http://solitudo.net/software/raspberrypi/rpi-openmax-demos/)

