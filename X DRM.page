---
categories: linux,kernel,X
...

# Description from en. wiki

The Direct Rendering Manager was created to allow multiple programs to use video hardware resources cooperatively.[4] The DRM gets exclusive access to the GPU, and it's responsible for initializing and maintaining the command queue, memory, and any other hardware resource. Programs wishing to use the GPU send requests to DRM, which acts as an arbitrator and takes care to avoid possible conflicts.

The scope of DRM has been expanded over the years to cover more functionality previously handled by user space programs, such as framebuffer managing and mode setting, memory sharing objects and memory synchronization.[5][6] Some of these expansions were given specific names, such as Graphics Execution Manager (GEM) or Kernel Mode-Setting (KMS), and the terminology prevails when the functionality they provide is specifically alluded. But they are really parts of the whole kernel DRM subsystem.

Device files created: ```/dev/dri/cardX``` and everything else under ```/dev/dri```. Requests are performed through ioctl.


# Overview article

* [The DRM/KMS subsystem from a newbieâ€™s point of view](https://events.static.linuxfound.org/sites/events/files/slides/brezillon-drm-kms.pdf)

# Raspberry pi and tinydrm

* [raspberry pi vc4 commit](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c8b75bca92cbf064b9fa125fc74a85994452e935)


Apparently (according e.g. to [this guy](https://medium.com/@meghana.madhyastha/outreachy-setting-up-raspberry-pi-3-bfe53f9d15c8) ) it is enough to get device supported by tinydrm and to use vc4 to have display with graphic acceleration.

* [Gentoo guide for raspberry pi VC4](https://wiki.gentoo.org/wiki/Raspberry_Pi_VC4)