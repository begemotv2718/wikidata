---
categories: linux,kernel,X
...

# Description from en. wiki

The Direct Rendering Manager was created to allow multiple programs to use video hardware resources cooperatively.[4] The DRM gets exclusive access to the GPU, and it's responsible for initializing and maintaining the command queue, memory, and any other hardware resource. Programs wishing to use the GPU send requests to DRM, which acts as an arbitrator and takes care to avoid possible conflicts.

The scope of DRM has been expanded over the years to cover more functionality previously handled by user space programs, such as framebuffer managing and mode setting, memory sharing objects and memory synchronization.[5][6] Some of these expansions were given specific names, such as Graphics Execution Manager (GEM) or Kernel Mode-Setting (KMS), and the terminology prevails when the functionality they provide is specifically alluded. But they are really parts of the whole kernel DRM subsystem.

Device files created: ```/dev/dri/cardX``` and everything else under ```/dev/dri```. Requests are performed through ioctl.


# Overview article

* [The DRM/KMS subsystem from a newbieâ€™s point of view](https://events.static.linuxfound.org/sites/events/files/slides/brezillon-drm-kms.pdf)

# Raspberry pi and tinydrm

* [raspberry pi vc4 commit](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c8b75bca92cbf064b9fa125fc74a85994452e935)


Apparently (according e.g. to [this guy](https://medium.com/@meghana.madhyastha/outreachy-setting-up-raspberry-pi-3-bfe53f9d15c8) ) it is enough to get device supported by tinydrm and to use vc4 to have display with graphic acceleration.

Another confirmation about VC4 working with tinydrm [from reddit, Erik Anholt answer](https://www.reddit.com/r/raspberry_pi/comments/85n4xk/question_about_pi_and_those_little_35_displays/)

> If you enable the VC4 graphics driver in raspi-config, then you should be able to also get the SPI panel to work using Noralf's tinydrm drivers. At that point, X can easily attach to either of them using the modesetting driver, though without acceleration on the SPI display. If you want the SPI to be an extension of your HDMI desktop, you probably want to be using something like lightpipe to scrape the HDMI contents and push them across to a second X server with no input devices talking to the SPI.

* [Gentoo guide for raspberry pi VC4](https://wiki.gentoo.org/wiki/Raspberry_Pi_VC4)


According to vc4 source code [vc4_drv.c](https://elixir.bootlin.com/linux/latest/source/drivers/gpu/drm/vc4/vc4_drv.c#L308): 

>  The Broadcom VideoCore 4 (present in the Raspberry Pi) contains a
> OpenGL ES 2.0-compatible 3D engine called V3D, and a highly
> configurable display output pipeline that supports HDMI, DSI, DPI,
> and Composite TV output.

Questions wtf is :

* DSI (apparently Display serial interface)
* DPI
* CRTC


# Kernel Mode Setting, etc.

* [DRM Modesetting Example -- github](https://github.com/dvdhrm/docs/blob/master/drm-howto/modeset.c) Controlling KMS from user interface perspective. 

## WTF is xf86drm.h ?

```
/**
 * \file xf86drm.h 
 * OS-independent header for DRM user-level library interface.
 *
 * \author Rickard E. (Rik) Faith <faith@valinux.com>
 */
```

## Kernel Recipes 2017 - An introduction to the Linux DRM subsystem

* [Kernel Recipes 2017 - An introduction to the Linux DRM subsystem - Maxime Ripard - YouTube](https://www.youtube.com/watch?v=LbDOCJcDRoo) * [Slides](https://bootlin.com/pub/conferences/2017/kr/ripard-drm/)

**Summary**

