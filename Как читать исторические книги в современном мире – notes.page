---
categories: history
...


Первые соображения на этот счет у меня появились при чтении Таис Афинской -- там действие происходит во многих царствах древнего мира одновременно (что, конечно, легко, когда Александр Македонский --герой). Хотелось представить хотя бы примерно картину мира в головах тогдашних людей. Единственное, чего я добился -- нарисовал карту хронологии трех царств (греков, египтян и персов) в логарифмическом масштабе, начиная от времен Александра (с наибольшим разрешением) и с экспоненциально убывающим разрешением в глубь времен. Идея, конечно, в том, что есть период полураспада исторического знания, и, значит, в глубине веков помнится экспоненциально меньше подробностей. 

![Thais timeline](images/Thais_timeline.png)


С другой стороны, работая с википедией, мне всегда хотелось для каждого года в истории иметь status quo: какие правители правили в этот год, как была раскроена карта мира, какие астрономические события можно было видеть в этот год, какие знаменитые события произошли в этот год. Был бы я приличным гимназистом, мне бы не требовалась помощь стальной машины где дышит интеграл для такой задачи, но я, увы, советский школьник средней степени прилежности.
Кое-что какие костыли для этой задачи появились для меня где-то в 2007 году -- например, исторический атлас [centennia](http://www.clockwk.com/download.html).
Сейчас, пока существует проект [geakron](http://geacron.com/home-en/), задача исторического атласа решена почти окончательно. Интересно было бы наложить на него карту астрономических явлений, но для слишком глубокого прошлого (более 1000 лет назад) это проблематично -- есть эффекты приливного замедления вращения Земли, которые не совсем чтобы чистые и аккуратные, и поэтому карты солнечных затмений имеют невероятную неопределенность по долготе. Сие, кстати, было одним из источников вдохновения академика Фоменко, который очень быстро объявил все затмения более чем 500-летней давности недостоверными.

Возвращаясь к чтению: читая книжки, хотелось бы видеть этакий executive summary того, что твориться в голове у героя.


Немного разработаем концепцию: кроме карты, такой как geacron хотелось бы, чтобы на карте для данного года были отмечены текущие правители всех государств, а также все знаменитые люди каждый приписаный к своему городу. Про это стоило бы поговорить с opendata community. 

Полезная ссылка [OSM efforts to historical maps](http://wiki.openstreetmap.org/wiki/Open_Historical_Map).

Соображения по датасетам: где-то была замечательная визуализация как знаменитые люди перемещались от рождения к смерти. Пока найти не удается.


Что еще можно сюда приплести: хорошо бы разобрать какую-нибудь книжку не слишком современного автора пользуясь всеми доступными средствами реконструкции картинки в голове у героя. Хорошо для этой цели может подойти Граф Монте-Кристо, а может и Пушкин и Лермонтов. Декамерон, Мемуары Казановы в конце-концов.

Хотелось бы почитать Аарона Гуревича про реконструкцию средневекового быта, к этому бы еще приплести Клайва Льюиса (Discarded image).

В википедии есть неплохой разбор по десятилетиям, см., например, [1810s](https://en.wikipedia.org/wiki/1810s)

На гитхабе сейчас есть проект [history timeline](https://github.com/ybogdanov/history-timeline/) в нем есть времена жизни всех значительных людей всех времен даже отранжированных по значимости(вот [это](https://github.com/ybogdanov/history-timeline/blob/master/public/data/data_1000.js) -- сокращенный датасет). Исходные данные для этого датасета взяты в основном [отсюда](http://pantheon.media.mit.edu), там же объяснен [метод подсчета ширины погонов]( http://pantheon.media.mit.edu/methods). Хотелось бы из этого сделать генератор status quo для каждого года, а для этого нужно имплементировать [алгоритм интервального дерева](http://codeforces.com/blog/entry/15846) он же segment tree algorithm, interval tree algorithm

Relevant links

* [IFMO Wiki interval tree](http://neerc.ifmo.ru/wiki/index.php?title=%D0%94%D0%B5%D1%80%D0%B5%D0%B2%D0%BE_%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B2%D0%B0%D0%BB%D0%BE%D0%B2_%28interval_tree%29_%D0%B8_%D0%BF%D0%B5%D1%80%D0%B5%D1%81%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D0%B5_%D1%82%D0%BE%D1%87%D0%BA%D0%B8_%D1%81_%D0%BC%D0%BD%D0%BE%D0%B6%D0%B5%D1%81%D1%82%D0%B2%D0%BE%D0%BC_%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B2%D0%B0%D0%BB%D0%BE%D0%B2)
* [Habr page](https://habrahabr.ru/post/115026/)
* [Haskell Data.IntervalMap.FingerTree](https://hackage.haskell.org/package/fingertree-0.1.1.0/docs/Data-IntervalMap-FingerTree.html)
* [Another Haskell IntervalMap](http://www.chr-breitkopf.de/comp/IntervalMap/index.html)
* [SOverflow question about intervalmap](http://stackoverflow.com/questions/3893281/haskell-range-map-library)
* [Haskell Data.Time.Calendar](https://hackage.haskell.org/package/time-1.7.0.1/docs/Data-Time-Calendar.html)
    * [Modified Julian Day](https://ru.wikipedia.org/wiki/%D0%AE%D0%BB%D0%B8%D0%B0%D0%BD%D1%81%D0%BA%D0%B0%D1%8F_%D0%B4%D0%B0%D1%82%D0%B0#.D0.9C.D0.BE.D0.B4.D0.B8.D1.84.D0.B8.D0.BA.D0.B0.D1.86.D0.B8.D0.B8_.D0.B8_.D0.B0.D0.BB.D1.8C.D1.82.D0.B5.D1.80.D0.BD.D0.B0.D1.82.D0.B8.D0.B2.D1.8B_.D1.8E.D0.BB.D0.B8.D0.B0.D0.BD.D1.81.D0.BA.D0.BE.D0.BC.D1.83_.D0.B4.D0.BD.D1.8E) -- Julian day - (large constant part=2400000) +0.5 day
* [Haskell Aeson applicative parse of JSON](http://blog.raynes.me/blog/2012/11/27/easy-json-parsing-in-haskell-with-aeson/)


Хорошая идея для вступления, да и вообще правда: У меня есть достаточно странная привычка пытаться представлять себя не в том месте или не в том времени, в котором я на самом деле. Впрочем, то же двигает и писателями про попаданцев.

# Some related interesting link

* [GDELT dataset -- historical events since 1979 until now covered in all type of media](http://gdeltproject.org/)
    * I know about this from [habr post](https://habrahabr.ru/post/224647/)

## Graph databases related
 
* [Influential thinkers map of influence, use of dbpedia data (influenced by, influence)](http://brendangriffen.com/assets/thinkers/)
    * [Blog post about the relevant work on dbpedia: graphing the history of philosophy](http://www.coppelia.io/2012/06/graphing-the-history-of-philosophy/)
    * [Dbpedia query for philosophers](http://dbpedia.org/snorql/?query=SELECT+*%0D%0AWHERE+{%0D%0A%3Fp+a+%3Chttp%3A%2F%2Fdbpedia.org%2Fontology%2FPhilosopher%3E+.%0D%0A%3Fp+%3Chttp%3A%2F%2Fdbpedia.org%2Fontology%2Finfluenced%3E+%3Finfluenced.%0D%0A})
* [Freebase+Science article: chart of cultural migration: youtube](https://www.youtube.com/watch?v=4gIhRkCcD4U)
    * [Source: habr post](https://habrahabr.ru/post/232591/)
    * referenced article [doi:10.1126/science.1240064](http://www.sciencemag.org/lookup/doi/10.1126/science.1240064)
    * [freebase](https://github.com/nchah/freebase-triples) The site freebase.org is discontinued in 2016. The data dumps are available. Currently the dump is about 30Gb gzip, 400Gb uncompressed.
        * [Some soft to work with freebase dump](https://github.com/nchah/freebase-triples) Suggests to use cayley and neo4j graph databases.
* [Wikidata query service](https://query.wikidata.org/)

### Neo4j

* [Storing and quering rdf in Neo4j](http://www.snee.com/bobdc.blog/2014/01/storing-and-querying-rdf-in-ne.html) -- using just curl to post json
* [Dbpedia2neo in java](https://github.com/claudiomartella/dbpedia4neo) Needs maven to build, seems to be quite bulky
* [Turtle loader: also in java and needs maven](https://github.com/mybyte/tools/tree/master/Turtle%20loader)
    * [Blog post explaining how this should work](http://michaelbloggs.blogspot.com.by/2013/05/importing-ttl-turtle-ontologies-in-neo4j.html)
* [Stackoverflow: explanations how to import rdf into neo4j which leads to the links above](http://stackoverflow.com/questions/19676485/import-rdf-xml-or-turtle-into-neo4j)
* [Neo4j python interface](https://neo4j.com/developer/python/)
    * [Python rdf parser](https://github.com/RDFLib/rdflib)

### Working with dbpedia

* [Simple work with dbpedia: importing json](http://skipperkongen.dk/category/free-data/) [Example of getting json](http://dbpedia.org/data/Peter_the_Great.json)

```python

import requests
 
data = requests.get('http://dbpedia.org/data/Matteo_Donati.json').json()
matteo = data['http://dbpedia.org/resource/Matteo_Donati']
 
# matteo is a dictionary with lots of keys
# that correspond to the player's properties.
# Each value is a list of dictionaries itself.
 
height = matteo['http://dbpedia.org/ontology/height'][0]['value']
```