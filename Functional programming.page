---
categories: functional_programming
...



* [Functional programming and design patterns]()

# Data structures

* [Monoids and finger trees (apfelmus)](http://apfelmus.nfshost.com/articles/monoid-fingertree.html) -- As far as I understand finger tree is an annotated tree where annotation form a monoid.
    * [Incremental regular expressions matching on finger trees](http://blog.sigfpe.com/2009/01/fast-incremental-regular-expression.html) The idea is to make finite state automaton with a result on substring into monoid. Interesting to compare with: Ukkonen algorithm, Suffix trees
* [Okasaki russian study group](https://groups.google.com/forum/?hl=en&fromgroups#!forum/okasaki-russian-study-group)

## Free monad

The idea behind the free monad is simple. It is easier to understand it if we use `return::a->m a` and `join:: m (m a)->m a` operations to define monad instead of `return` and `(>>=)::m a->(a-> m b)->m b`. The idea of the Free monad is to make `join` do almost nothing. This is possible if `m (m a)` and `m a` are actually the same type. And this is possible if the definition of the type is recursive.

* [Free monad tutorial](http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html) **You could have invented free monad** is the same. Example are parser of simple language.
* [Purify your code with free monad](http://www.haskellforall.com/2012/07/purify-code-using-free-monads.html)
* Scala free monad (kind of difficult to read) [Free monads are simple](http://underscore.io/blog/posts/2015/04/14/free-monads-are-simple.html) Much better written article [Free monads - what? and why?](https://softwaremill.com/free-monads/)
* [Stackoverflow question: What are free monads](https://stackoverflow.com/questions/13352205/what-are-free-monads)

### Related

* [Free group](http://www.algebraical.info/doku.php?id=glossary:group:free)
* [Free monoid](https://en.wikipedia.org/wiki/Free_monoid)

## Intervals operation

$a\in (a_0,a_1), b\in(b_0,b_1)$

* Sum $a+b\in(a_0+b_0,a_1+b_1)$
* Difference 

## Lenses

Lens is two operators *get* and *put*, where *get* creates a 'view' on initial structure and 'put' updates initial structure on the basis of updated 'view'.

get: $\Sigma\to\Delta$

put: $\Delta\times\Sigma\to\Sigma$.

I.e. to accurately update the initial structure on the basis of 'view' put takes both unmodified structure and the updated view and creates updated structure.

Pair of *get* and *put* form lens if they satisfy some rules of composition ``` get (put s a) = a```, ```put (put s b) a = put s a``` etc.

In functional languages lens form a composable operation with a complex data structure. 

Some constructions of lenses in haskell:

* [Functional lenses: Stackoverflow](http://stackoverflow.com/questions/8307370/functional-lenses)
* [Survey of lenses haskell packages: Stackoverflow](http://stackoverflow.com/questions/5767129/lenses-fclabels-data-accessor-which-library-for-structure-access-and-mutatio) data-accessor, data-lens, fclabels, etc are compared
* [Basic lenses: school of haskell](https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/basic-lensing)
* [Functional lenses: how do they work](https://medium.com/@dtipson/functional-lenses-d1aba9e52254#.hd4kysr8v)

Lenses appeared useful in parsing of data files: [augeas](https://en.wikipedia.org/wiki/Augeas_%28software%29) project. The general theory of update some element of abstract representation of a text file is developed by creators of [boomerang language](http://www.seas.upenn.edu/~harmony/).

* [Creating a lens step-by-step: augeas](https://github.com/hercules-team/augeas/wiki/Creating-a-lens-step-by-step)

# Supercompilation

* [Refal](https://en.wikipedia.org/wiki/Refal) -- Language that first introduced idea of supercompilation.
    * [Refal Graphs: how supercompilation work now](http://www.refal.org/doc/turchin/dag/node3.html)
    * [Old Refal reference](http://web.archive.org/web/20080511193606/http://www.supercompilers.com/html/refal_content.html)
    * [Competitors](http://web.archive.org/web/20080513233839/http://www.supercompilers.com/competitors.shtml)  -- some interesting Java optimizers
* [Supercompilation by evaluation (by Simon Peyton-Jones)](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/supercomp-by-eval.pdf?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Fsupercompilation%2Fsupercomp-by-eval.pdf)

# See also 

* [Haskell]()